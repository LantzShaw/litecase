<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.litecase</groupId>
    <artifactId>litecase-parent</artifactId>
    <version>0.0.1-1</version>
<!--    <name>litecase-parent</name>-->
    <description>litecase</description>

    <!-- 修改父项目的打包方式为pom -->
    <!-- 小结：父级项目里packaging打包方式一般配置成pom，pom 表示项目里没有java代码,也不执行任何代码,只是为了聚合工程或传递依赖用的。-->
    <packaging>pom</packaging>

    <!-- 依赖版本统一管理 -->
    <properties>
        <java.version>17</java.version>
        <springframework.version>3.1.0</springframework.version>
        <mybatis.version>3.5.13</mybatis.version>
        <mybatisspring.version>2.0.7</mybatisspring.version>
        <thymeleaf.version>3.1.0</thymeleaf.version>

        <start-class>com.litecase.start.LitecaseStartApplication</start-class>
    </properties>


    <!-- 添加子模块到父项目 -->
    <modules>
        <module>litecase-core</module>
        <module>litecase-base</module>
        <module>litecase-start</module>
    </modules>



    <dependencyManagement>
        <dependencies>
            <!-- SpringBoot 热加载 -->
<!--            <dependency>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-devtools</artifactId>-->
<!--                <optional>true</optional>-->
<!--            </dependency>-->

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${springframework.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${springframework.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatisspring.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>

<!--            <dependency>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-starter-thymeleaf</artifactId>-->
<!--                <version>${thymeleaf.version}</version>-->
<!--            </dependency>-->
        </dependencies>
    </dependencyManagement>

<!--    <dependencies>-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-web</artifactId>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-test</artifactId>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>org.mybatis</groupId>-->
<!--            <artifactId>mybatis-spring</artifactId>-->
<!--            <version>2.0.7</version>-->
<!--        </dependency>-->

<!--        <dependency>-->
<!--            <groupId>org.mybatis</groupId>-->
<!--            <artifactId>mybatis</artifactId>-->
<!--            <version>3.5.13</version>-->
<!--        </dependency>-->
<!--    </dependencies>-->


<!--    <properties>-->
<!--        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>-->
<!--        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>-->
<!--        <java.version>1.8</java.version>-->

<!--    在properties中统一控制依赖包的版本，更清晰-->
<!--        <dubbo.version>2.5.3</dubbo.version>-->
<!--        <zkclient.version>0.10</zkclient.version>-->
<!--    </properties>   -->
<!--
ependencyManagement只会影响现有依赖的配置，但不会引入依赖，
即子model不会继承parent中dependencyManagement所有预定义的depandency，
只引入需要的依赖即可，简单说就是“按需引入依赖”或者“按需继承”；
因此，在parent中严禁直接使用depandencys预定义依赖，
坏处是子model会自动继承depandencys中所有预定义依赖；
-->
    <!--  依赖管理  -->
<!--    <dependencyManagement>-->

<!--    </dependencyManagement>-->

<!--    -该插件作用是打一个可运行的包，
必须要写在需要打包的项目里。这里的父模块不需要打包运行，
所以删掉该插件。
-->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>

        <!-- 父pom中统一管理plugin, 子pom只需要使用groupId与artifactId即可, 目的是为了方便管理，统一版本, 起到按需引入的效果, 类似dependencyManagement -->
<!--        <pluginManagement>-->
<!--            <plugins>-->
<!--                <plugin>-->
<!--                    <groupId>org.springframework.boot</groupId>-->
<!--                    <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                </plugin>-->
<!--            </plugins>-->
<!--        </pluginManagement>-->
    </build>

    <!-- 环境 -->
    <profiles>
        <!-- 开发 -->
        <profile>
            <id>dev</id>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <!--当前环境-->
                <profile.name>dev</profile.name>
                <database.type>postgresql</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Nacos配置中心地址-->
                <config.server-addr></config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr></discovery.server-addr>
                <sentinel.server-addr></sentinel.server-addr>
            </properties>
        </profile>
        <!-- 生产 -->
        <profile>
            <id>local</id>
            <properties>
                <!--当前环境-->
                <profile.name>local</profile.name>
                <database.type>mysql8</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Nacos配置中心地址-->
                <config.server-addr></config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <!--<config.namespace>8fdcc073-2e51-4722-8274-3f5b76362bb8</config.namespace>-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr></discovery.server-addr>
                <sentinel.server-addr></sentinel.server-addr>
            </properties>
        </profile>
        <!-- 生产 -->
        <profile>
            <id>prod</id>
            <properties>
                <!--当前环境-->
                <profile.name>prod</profile.name>
                <database.type>mysql8</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Nacos配置中心地址-->
                <config.server-addr></config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <!--<config.namespace>8fdcc073-2e51-4722-8274-3f5b76362bb8</config.namespace>-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr></discovery.server-addr>
                <sentinel.server-addr></sentinel.server-addr>
            </properties>
        </profile>
        <!-- Docker -->
        <profile>
            <id>docker</id>
            <properties>
                <!--当前环境-->
                <profile.name>docker</profile.name>
                <!--数据库类型-->
                <database.type>postgresql</database.type>
                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
                <!--Nacos配置中心地址-->
                <config.server-addr></config.server-addr>
                <!--Nacos配置中心命名空间,用于支持多环境.这里必须使用ID，不能使用名称,默认为空-->
                <config.namespace></config.namespace>
                <!--Nacos服务发现地址-->
                <discovery.server-addr></discovery.server-addr>
                <sentinel.server-addr></sentinel.server-addr>
            </properties>
        </profile>
    </profiles>



<!--    <modules>-->
<!--        <module>?</module>-->
<!--    </modules>-->

<!--    <pluginRepositories>-->
<!--        <pluginRepository>-->
<!--            <id>aliyun-repository</id>-->
<!--            <url>https://maven.aliyun.com/repository/public/</url>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </pluginRepository>-->
<!--        <pluginRepository>-->
<!--            <id>tencent-repository</id>-->
<!--            <url>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </pluginRepository>-->
<!--        <pluginRepository>-->
<!--            <id>huawei-repository</id>-->
<!--            <url>https://repo.huaweicloud.com/repository/maven/</url>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </pluginRepository>-->
<!--    </pluginRepositories>-->

</project>
